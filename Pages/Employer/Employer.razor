@page "/addNewEmployer"
@using System.Linq
@using AplikacjaWyplat.Pages.Enums;
@inject SalaryRule SalaryRule

<PageTitle>Obliczanie pensji pracownika</PageTitle>

<MudText Typo="Typo.h3" Class="mb-8">Formularz rozliczania pracowników</MudText>


<MudSelect T="@JobPosition" Label="Pozycja" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ValueChanged="OnJobPositionChanged">
    <MudSelectItem Value="@JobPosition.Manager" />
    <MudSelectItem Value="@JobPosition.Programmer" />
    <MudSelectItem Value="@JobPosition.Analyst" />
    <MudSelectItem Value="@JobPosition.PM" />
    <MudSelectItem Value="@JobPosition.Tester" />
    <MudSelectItem Value="@JobPosition.Niestandardowy" />
</MudSelect>

<MudTextField @bind-Value="Amount" Label="Zarobki" Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
Disabled/>


<MudCheckBox @bind-Value="Delegations" Label="Delegacje ?" />

@if(Delegations == true)
{
    <MudDatePicker @bind-Date="DateFrom" Label="Data od " Variant="Variant.Filled"  />

    <MudDatePicker @bind-Date="DateFrom" Label="Data do" Variant="Variant.Filled" MinDate="DateFrom" />

}

<MudCheckBox @bind-Value="Overtime" Label="Nadgodziny ?" />

@if(Overtime == true)
{
    <MudNumericField @bind-Value="NumberOfOvertime" Label="Ilość nagodzin" />
}

<MudButton OnClick="@Oblicz" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-10">Wylicz pensje</MudButton>


@if (wyplata.Length != 0)
{
    <MudAlert>@wyplata</MudAlert>
}


@code {

    public string? TextValue { get; set; }
    public double? Amount { get; set; }
    public bool? Delegations { get; set; } = false;
    public DateTime? DateFrom { get; set; }
    public DateTime? DateTo { get; set; }
    public bool? Overtime { get; set; } = false;
    public int? NumberOfOvertime {get; set;}
    public string wyplata { get; set; } = "";

    public void Oblicz(){
        SalaryRule salary = new SalaryRule();
        wyplata = salary.main();
    }

    private void OnJobPositionChanged(JobPosition newPosition)
    {
        switch (newPosition)
        {
            case JobPosition.Manager:
                Amount = 100;
                break;
            case JobPosition.Programmer:
                Amount = 80;
                break;
            case JobPosition.Analyst:
                Amount = 70;
                break;
            case JobPosition.PM:
                Amount = 90;
                break;
            case JobPosition.Tester:
                Amount = 60;
                break;
            default:
                Amount = 0;
                break;
        }
    }
    
}
